//@version=5
indicator(title="Helper", shorttitle="Helper", overlay=true)

length = input.int(title="ATR Length", defval=200, minval=1)
smoothing = input.string(title="ATR Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])

order_risk_profit = input.int(title="Cash risk, $", defval=1, minval=1)
profit_factor = input.int(title="Profit Factor", defval=3, minval=1)

max_tax_rate = input.float(title="Max tax, %", defval=5.0, minval=0.1)
order_tax = input.float(title="Summary tax, %", defval=0.05, minval=0.01)

ma_function(source, length) =>
	switch smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)
atr = ma_function(ta.tr(true), length)




// show close line
plot(close, color=color.new(color.yellow, 35), title="Close", linewidth=2)




// show future price
is_need_future = str.endswith(syminfo.tickerid, 'USDT')
target_ticker = is_need_future ? syminfo.tickerid + ".P" : syminfo.tickerid
[target_price, target_atr] = request.security(target_ticker, timeframe.period, [close, ma_function(ta.tr(true), length)], ignore_invalid_symbol = true)
alpha = is_need_future ? 0 : 100
future = line.new(bar_index + 1, target_price, bar_index + 2, target_price, color = color.new(color.fuchsia, alpha), width = 2)
line.delete(future[1])




// show position amount and tax rate
atr_for_position = na(target_atr) ? atr : target_atr
price_for_position = na(target_atr) ? close : target_price

stop_percents = atr_for_position / close * 100
order_size = order_risk_profit * 100 / stop_percents
cur_tax_rate_cash = order_tax * order_size / 100
cur_tax_rate = cur_tax_rate_cash / order_risk_profit * 100
is_overheadrate = cur_tax_rate > max_tax_rate
label_text = str.tostring(math.round(order_size)) + '$ ' + str.tostring(math.round(cur_tax_rate, 1)) + '%'
label_color = (is_overheadrate) ? color.orange : color.silver
pos_label = label.new(bar_index + 2, close + atr, text=label_text, color=label_color, style=label.style_label_lower_left)
label.delete(pos_label[1])




// show targets
goal_1_f = 0.214
goal_2_f = 0.5
goal_3_f = 1
summary_profit_factor = (goal_1_f * 0.33) + (goal_2_f * 0.33) + (goal_3_f * 0.34)
target_profit_amount = order_risk_profit * profit_factor / summary_profit_factor

draw_goal(is_up, factor) =>
    goal = (1 - target_profit_amount / order_size * factor) * price_for_position
    if is_up
        goal := (1 + target_profit_amount / order_size * factor) * price_for_position
    goal_line = line.new(bar_index + 2, goal, bar_index + 3, goal, color = color.new(color.green, 0), width = 2)
    line.delete(goal_line[1])

draw_goal(true, goal_1_f)
draw_goal(true, goal_2_f)
draw_goal(true, goal_3_f)
draw_goal(false, goal_1_f)
draw_goal(false, goal_2_f)
draw_goal(false, goal_3_f)




// show atr range
plotchar(atr_for_position, title = "Atr", char="", location=location.top, color=color.new(color.fuchsia, 100))

up = line.new(bar_index + 1, price_for_position + atr_for_position, bar_index + 2, price_for_position + atr_for_position, color = color.new(color.orange, 0), width = 2)
line.delete(up[1])
plotchar(price_for_position + atr_for_position, title = "Up Atr", char="", location=location.top, color=color.new(color.orange, 100))

down = line.new(bar_index + 1, price_for_position - atr_for_position, bar_index + 2, price_for_position - atr_for_position, color = color.new(color.orange, 0), width = 2)
line.delete(down[1])
plotchar(price_for_position - atr_for_position, title = "Down Atr", char="", location=location.top, color=color.new(color.orange, 100))




// mark not closed bar
color = barstate.isrealtime ? color.new(#afafaf, 0) : na
barcolor(color, show_last = 1)
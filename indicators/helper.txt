//@version=5
indicator(title="Helper", shorttitle="Helper", overlay=true)

length = input.int(title="ATR Length", defval=50, minval=1)
smoothing = input.string(title="ATR Smoothing", defval="WMA", options=["RMA", "SMA", "EMA", "WMA"])

order_risk_profit = input.int(title="Cash risk, $", defval=1, minval=1)
profit_factor = input.float(title="Profit Factor", defval=2.5, minval=1.0)

atr_factor = input.float(title="Atr Factor", defval=0.5, minval=0.1)

index = barstate.isrealtime ? 1 : 0
ma_function(source, length) =>
	switch smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)
atr = ma_function(ta.tr(true), length)[index]

// show close line
plot(close, color=color.new(color.yellow, 35), title="Close", linewidth=2)


// show position amount
atr_for_position = math.round(atr * atr_factor, 2)
price_for_position = close

stop_percents = atr_for_position / price_for_position * 100
order_size = order_risk_profit * 100 / stop_percents
label_text = str.tostring(math.round(order_size)) + '$'
label_color = color.silver
pos_label = label.new(bar_index + 2, price_for_position + profit_factor * atr_for_position, text=label_text, color=label_color, style=label.style_label_lower_left)
label.delete(pos_label[1])



// show targets
draw_goal(is_up, color, distance) =>
    goal = price_for_position + profit_factor * atr_for_position
    if is_up
        goal := price_for_position - profit_factor * atr_for_position
    goal_line = line.new(bar_index + distance, goal, bar_index + distance + 1, goal, color = color, width = 2)
    line.delete(goal_line[1])

draw_goal(true, color.green, 2)
draw_goal(false, color.green, 2)




// show atr range
plotchar(atr_for_position, title = "Atr", char="", location=location.top, color=color.new(color.fuchsia, 100))
plotchar(atr_factor, title = "Atr Factor", char="", location=location.top, color=color.new(color.lime, 100))

up = line.new(bar_index + 1, price_for_position + atr_for_position, bar_index + 2, price_for_position + atr_for_position, color = color.new(color.orange, 0), width = 2)
line.delete(up[1])
plotchar(price_for_position + atr_for_position, title = "Up Atr", char="", location=location.top, color=color.new(color.orange, 100))

down = line.new(bar_index + 1, price_for_position - atr_for_position, bar_index + 2, price_for_position - atr_for_position, color = color.new(color.orange, 0), width = 2)
line.delete(down[1])
plotchar(price_for_position - atr_for_position, title = "Down Atr", char="", location=location.top, color=color.new(color.orange, 100))




// mark not closed bar
color = barstate.isrealtime ? color.new(#afafaf, 0) : na
barcolor(color, show_last = 1)